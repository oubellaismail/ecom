name: Deploy to Production

on:
  push:
    branches:
      - master

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SSL_CERTIFICATE: ${{ secrets.SSL_CERTIFICATE }}
  SSL_PRIVATE_KEY: ${{ secrets.SSL_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./front
          file: ./front/Dockerfile.prod
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/front:latest

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./back
          file: ./back/Dockerfile.prod
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/back:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/app
            
            # Create SSL certificates directory if it doesn't exist
            mkdir -p ssl_certs
            
            # Write SSL certificates from secrets
            echo "${{ env.SSL_CERTIFICATE }}" > ssl_certs/fullchain.pem
            echo "${{ env.SSL_PRIVATE_KEY }}" > ssl_certs/3assasa.software.key
            
            # Set proper permissions for SSL certificates
            chmod 644 ssl_certs/fullchain.pem
            chmod 600 ssl_certs/3assasa.software.key
            
            # Pull and start containers
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker system prune -f
